#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

// Define a class for each state in the search space
class State {
public:
    vector<int> board;
    int queens;
    int cost;

    State(vector<int>& b, int q, int c) : board(b), queens(q), cost(c) {}

    bool operator<(const State& other) const {
        return cost > other.cost; // A* uses a min-heap, so we invert the comparison
    }
};

// Heuristic function (estimate of remaining cost)
int heuristic(const vector<int>& board, int queens) {
    int n = board.size();
    int conflicts = 0;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (board[i] == board[j] || abs(i - j) == abs(board[i] - board[j])) {
                conflicts++;
            }
        }
    }

    return conflicts;
}

// A* algorithm to solve the N-Queens problem
vector<int> solveNQueens(int n) {
    vector<int> initialBoard(n, -1); // -1 represents an empty cell
    State initialState(initialBoard, 0, 0);

    priority_queue<State> priorityQueue;
    priorityQueue.push(initialState);

    while (!priorityQueue.empty()) {
        State currentState = priorityQueue.top();
        priorityQueue.pop();

        if (currentState.queens == n) {
            return currentState.board; // Solution found
        }

        for (int queen = 0; queen < n; queen++) {
            if (currentState.board[queen] == -1) {
                vector<int> newBoard = currentState.board;
                newBoard[currentState.queens] = queen;
                int newQueens = currentState.queens + 1;
                int newCost = heuristic(newBoard, newQueens) + newQueens;
                State newState(newBoard, newQueens, newCost);
                priorityQueue.push(newState);
            }
        }
    }

    return vector<int>(); // No solution found
}

// Function to print the N-Queens board
void printBoard(const vector<int>& board) {
    int n = board.size();
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (board[row] == col) {
                cout << "Q ";
            } else {
                cout << ". ";
            }
        }
        cout << endl;
    }
}

int main() {
    int n = 8; // Change this to the desired board size
    vector<int> solution = solveNQueens(n);

    if (!solution.empty()) {
        cout << "Solution:" << endl;
        printBoard(solution);
    } else {
        cout << "No solution found." << endl;
    }

    return 0;
}
